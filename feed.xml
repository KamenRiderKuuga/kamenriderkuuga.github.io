<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://lambda.cyou//</id><title>HANABI</title><subtitle>HANABI的技术博客</subtitle> <updated>2024-11-07T23:02:04+08:00</updated> <author> <name>HANABI</name> <uri>https://lambda.cyou//</uri> </author><link rel="self" type="application/atom+xml" href="https://lambda.cyou//feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://lambda.cyou//"/> <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator> <rights> © 2024 HANABI </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>wrk简介与使用备忘</title><link href="https://lambda.cyou//posts/wrk-1/" rel="alternate" type="text/html" title="wrk简介与使用备忘" /><published>2024-11-03T00:00:00+08:00</published> <updated>2024-11-03T00:00:00+08:00</updated> <id>https://lambda.cyou//posts/wrk-1/</id> <content src="https://lambda.cyou//posts/wrk-1/" /> <author> <name>Kuuga</name> </author> <category term="wrk" /> <summary> 一、什么是wrk 在平时的开发过程中，对于部分业务，我们对其性能具有一定的要求，或者想对其QPS达到多少有一个大概的概念，这时候就需要借助基准测试工具 wrk是一款针对HTTP协议的基准测试工具，具备如下优点： 轻量级性能测试工具，安装简单 学习成本低 基于异步事件驱动框架，单机支持并发高 比较常用的性能测试工具有Apache JMeter，Apache ab等，但是对于开发人员来说，在不需要如接口串联，场景压测等太多丰富功能的情况下，用JMeter这样的工具过于重了。而相对轻量，简单的选择中，ab的性能和wrk比起来又逊色不少（Nginx官方进行压测时也用wrk，而ab只能使用单核。本身就可能是压测的瓶颈），所以在日常工作中，推荐使用wrk对想要测试的接口进行基准测试 二、安装 因为wrk使用了一些限定于类UNIX操作系统使用的的编程特性，比如epoll，... </summary> </entry> <entry><title>Erlang程序设计</title><link href="https://lambda.cyou//posts/Erlang-1/" rel="alternate" type="text/html" title="Erlang程序设计" /><published>2024-08-09T00:00:00+08:00</published> <updated>2024-08-09T00:00:00+08:00</updated> <id>https://lambda.cyou//posts/Erlang-1/</id> <content src="https://lambda.cyou//posts/Erlang-1/" /> <author> <name>Kuuga</name> </author> <category term="Erlang" /> <summary> 第三章 变量 在Erlang里，变量就像数学里的那样。当关联一个值与一个变量时，所下的是一种断言， 也就是事实陈述。这个变量具有那个值，仅此而已。 变量的作用域是它定义时所处的语汇单元。因此，如果X被用在一条单独的函数子句 之内，它的值就不会“逃出”这个子句。没有同一函数的不同子句共享全局或私有变量这种说法。 如果X出现在许多不同的函数里，那么所有这些X的值都是不相干的。 Erlang里没有可变状态，没有共享内存，也没有锁。这让程序并行变得简单了。 模式匹配例子： {X,abc} = {123,abc}. % X = 123 {X,Y,Z} = {222,def,"cat"}. % X = 222, Y = def, Z = "cat" {X,Y} = {333,ghi,"cat"}. % 失败：元组的形状不同 X = true. ... </summary> </entry> <entry><title>Java异步编程漫游</title><link href="https://lambda.cyou//posts/Java-1/" rel="alternate" type="text/html" title="Java异步编程漫游" /><published>2024-01-30T00:00:00+08:00</published> <updated>2024-01-30T00:00:00+08:00</updated> <id>https://lambda.cyou//posts/Java-1/</id> <content src="https://lambda.cyou//posts/Java-1/" /> <author> <name>Kuuga</name> </author> <category term="Java" /> <summary> 原本计划分享ZooKeeper，但作为许多基础组件的组件，它离运维越来越近，离业务开发越来越远，以至于不容易找到或者举出什么真实的业务例子来介绍Zookeeper在实际工作中应该如何使用（比如虽然它可以拿来做分布式锁，却不是首选）。加上我并不认为短短的一个小时能介绍完ZooKeeper的重要内容，经过一番抉择之后，最终决定分享Java异步编程的相关内容，也是一个科普 + 知识漫游。 一、前言 在程序中发起请求是一个很常见的操作，访问数据库，发送邮件，使用搜索引擎时，我们都在发起请求。网络的使用极大扩展了我们的程序能力，但与此同时也需要付出代价，在使用网络进行通信的分布式架构下，我们需要承担网络故障和延迟可能对我们造成的影响，并且每个服务经常需要维护多个传入和传出的网络连接。 在编程时遇到需要同时处理多个网络请求时，应该采用什么策略呢，我们从简单的阻塞API讲起。... </summary> </entry> <entry><title>Windows使用备忘</title><link href="https://lambda.cyou//posts/Windows-1/" rel="alternate" type="text/html" title="Windows使用备忘" /><published>2023-11-03T00:00:00+08:00</published> <updated>2023-11-03T00:00:00+08:00</updated> <id>https://lambda.cyou//posts/Windows-1/</id> <content src="https://lambda.cyou//posts/Windows-1/" /> <author> <name>Kuuga</name> </author> <category term="Windows" /> <summary> Win10自带输入法设置自定义用户词组 在右下角输入法图标上点击右键，打开设置： 选中词库和自学习： 找到并点击添加或编辑自定义短语 为了方便输入中文直角引号「」和『』，我们如图示添加短语： 添加完成后，我们输入”yh”，就能很方便打出上面自定义的短语了 批量替换文件名 # 获取当前目录下所有文件 $files = Get-ChildItem -File foreach ($file in $files) { # 检查文件名是否包含指定字符串 if ($file.Name -match "m瑰d故s") { # 替换文件名中的字符串 $newFileName = $file.Name -replace "m瑰d故s", "玫瑰的故事" # 重命名文件 ... </summary> </entry> <entry><title>VSCode使用备忘</title><link href="https://lambda.cyou//posts/VSCode-1/" rel="alternate" type="text/html" title="VSCode使用备忘" /><published>2023-11-03T00:00:00+08:00</published> <updated>2023-11-03T00:00:00+08:00</updated> <id>https://lambda.cyou//posts/VSCode-1/</id> <content src="https://lambda.cyou//posts/VSCode-1/" /> <author> <name>Kuuga</name> </author> <category term="VSCode" /> <summary> 1. 设置Java项目启动参数 在 Visual Studio Code (VS Code) 中设置 Java 项目的启动路径可以通过配置 launch.json 文件来实现。以下是详细步骤： 安装必要的扩展：确保已经安装了 VS Code 的 Java 相关扩展包，如 Java Extension Pack，其中包含了调试和运行 Java 所需的插件。 创建 launch.json 文件： 打开 VS Code，进入你的 Java 项目。 按下 Ctrl + Shift + P（Windows）或 Cmd + Shift + P（Mac），输入 Debug: Open launch.json，然后选择该选项。 如果没有 launch.json，VS Code 会提示你选择环境。选择 Java，然后... </summary> </entry> </feed>
